/*
 * generated by Xtext 2.25.0
 */
grammar InternalLifeDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package game.of.life.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package game.of.life.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import game.of.life.services.LifeDslGrammarAccess;

}
@parser::members {
	private LifeDslGrammarAccess grammarAccess;

	public void setGrammarAccess(LifeDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGrid
entryRuleGrid
:
{ before(grammarAccess.getGridRule()); }
	 ruleGrid
{ after(grammarAccess.getGridRule()); } 
	 EOF 
;

// Rule Grid
ruleGrid 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGridAccess().getGroup()); }
		(rule__Grid__Group__0)
		{ after(grammarAccess.getGridAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvolutionRules
entryRuleEvolutionRules
:
{ before(grammarAccess.getEvolutionRulesRule()); }
	 ruleEvolutionRules
{ after(grammarAccess.getEvolutionRulesRule()); } 
	 EOF 
;

// Rule EvolutionRules
ruleEvolutionRules 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEvolutionRulesAccess().getGroup()); }
		(rule__EvolutionRules__Group__0)
		{ after(grammarAccess.getEvolutionRulesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule OperatorUnit
ruleOperatorUnit
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorUnitAccess().getAlternatives()); }
		(rule__OperatorUnit__Alternatives)
		{ after(grammarAccess.getOperatorUnitAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule DieAliveUnit
ruleDieAliveUnit
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDieAliveUnitAccess().getAlternatives()); }
		(rule__DieAliveUnit__Alternatives)
		{ after(grammarAccess.getDieAliveUnitAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorUnit__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorUnitAccess().getEQEnumLiteralDeclaration_0()); }
		('==')
		{ after(grammarAccess.getOperatorUnitAccess().getEQEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorUnitAccess().getLEnumLiteralDeclaration_1()); }
		('<')
		{ after(grammarAccess.getOperatorUnitAccess().getLEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorUnitAccess().getGEnumLiteralDeclaration_2()); }
		('>')
		{ after(grammarAccess.getOperatorUnitAccess().getGEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DieAliveUnit__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDieAliveUnitAccess().getDIEEnumLiteralDeclaration_0()); }
		('die')
		{ after(grammarAccess.getDieAliveUnitAccess().getDIEEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getDieAliveUnitAccess().getLIVEEnumLiteralDeclaration_1()); }
		('live')
		{ after(grammarAccess.getDieAliveUnitAccess().getLIVEEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getDieAliveUnitAccess().getBECOME_ALIVEEnumLiteralDeclaration_2()); }
		('become alive')
		{ after(grammarAccess.getDieAliveUnitAccess().getBECOME_ALIVEEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getInitialGridKeyword_0()); }
	'InitialGrid'
	{ after(grammarAccess.getModelAccess().getInitialGridKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getGridsAssignment_1()); }
	(rule__Model__GridsAssignment_1)*
	{ after(grammarAccess.getModelAccess().getGridsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getEvolutionRulesKeyword_2()); }
	'EvolutionRules'
	{ after(grammarAccess.getModelAccess().getEvolutionRulesKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getRulesAssignment_3()); }
	(rule__Model__RulesAssignment_3)*
	{ after(grammarAccess.getModelAccess().getRulesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Grid__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grid__Group__0__Impl
	rule__Grid__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGridAccess().getRowKeyword_0()); }
	'Row:'
	{ after(grammarAccess.getGridAccess().getRowKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grid__Group__1__Impl
	rule__Grid__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGridAccess().getRowAssignment_1()); }
	(rule__Grid__RowAssignment_1)
	{ after(grammarAccess.getGridAccess().getRowAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grid__Group__2__Impl
	rule__Grid__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGridAccess().getColumnKeyword_2()); }
	'Column:'
	{ after(grammarAccess.getGridAccess().getColumnKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grid__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGridAccess().getColumnAssignment_3()); }
	(rule__Grid__ColumnAssignment_3)
	{ after(grammarAccess.getGridAccess().getColumnAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EvolutionRules__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolutionRules__Group__0__Impl
	rule__EvolutionRules__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolutionRulesAccess().getRuleKeyword_0()); }
	'Rule:'
	{ after(grammarAccess.getEvolutionRulesAccess().getRuleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolutionRules__Group__1__Impl
	rule__EvolutionRules__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolutionRulesAccess().getNameAssignment_1()); }
	(rule__EvolutionRules__NameAssignment_1)
	{ after(grammarAccess.getEvolutionRulesAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolutionRules__Group__2__Impl
	rule__EvolutionRules__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolutionRulesAccess().getComparisonOperatorKeyword_2()); }
	'ComparisonOperator:'
	{ after(grammarAccess.getEvolutionRulesAccess().getComparisonOperatorKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolutionRules__Group__3__Impl
	rule__EvolutionRules__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolutionRulesAccess().getOperatorAssignment_3()); }
	(rule__EvolutionRules__OperatorAssignment_3)
	{ after(grammarAccess.getEvolutionRulesAccess().getOperatorAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolutionRules__Group__4__Impl
	rule__EvolutionRules__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolutionRulesAccess().getNumberOfLiveNeighborsKeyword_4()); }
	'NumberOfLiveNeighbors:'
	{ after(grammarAccess.getEvolutionRulesAccess().getNumberOfLiveNeighborsKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolutionRules__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolutionRulesAccess().getNumberOfLiveNeighborsAssignment_5()); }
	(rule__EvolutionRules__NumberOfLiveNeighborsAssignment_5)
	{ after(grammarAccess.getEvolutionRulesAccess().getNumberOfLiveNeighborsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__GridsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getGridsGridParserRuleCall_1_0()); }
		ruleGrid
		{ after(grammarAccess.getModelAccess().getGridsGridParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__RulesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getRulesEvolutionRulesParserRuleCall_3_0()); }
		ruleEvolutionRules
		{ after(grammarAccess.getModelAccess().getRulesEvolutionRulesParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__RowAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGridAccess().getRowINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getGridAccess().getRowINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__ColumnAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGridAccess().getColumnINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getGridAccess().getColumnINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolutionRulesAccess().getNameDieAliveUnitEnumRuleCall_1_0()); }
		ruleDieAliveUnit
		{ after(grammarAccess.getEvolutionRulesAccess().getNameDieAliveUnitEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__OperatorAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolutionRulesAccess().getOperatorOperatorUnitEnumRuleCall_3_0()); }
		ruleOperatorUnit
		{ after(grammarAccess.getEvolutionRulesAccess().getOperatorOperatorUnitEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__NumberOfLiveNeighborsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolutionRulesAccess().getNumberOfLiveNeighborsINTTerminalRuleCall_5_0()); }
		RULE_INT
		{ after(grammarAccess.getEvolutionRulesAccess().getNumberOfLiveNeighborsINTTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
