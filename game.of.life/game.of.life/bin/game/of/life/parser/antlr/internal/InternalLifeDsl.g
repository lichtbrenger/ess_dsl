/*
 * generated by Xtext 2.25.0
 */
grammar InternalLifeDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package game.of.life.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package game.of.life.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import game.of.life.services.LifeDslGrammarAccess;

}

@parser::members {

 	private LifeDslGrammarAccess grammarAccess;

    public InternalLifeDslParser(TokenStream input, LifeDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected LifeDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='InitialGrid'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getInitialGridKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getGridInitialGridParserRuleCall_1_0());
				}
				lv_grid_1_0=ruleInitialGrid
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"grid",
						lv_grid_1_0,
						"game.of.life.LifeDsl.InitialGrid");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='EvolutionRules'
		{
			newLeafNode(otherlv_2, grammarAccess.getModelAccess().getEvolutionRulesKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getRulesEvolutionRulesParserRuleCall_3_0());
				}
				lv_rules_3_0=ruleEvolutionRules
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"rules",
						lv_rules_3_0,
						"game.of.life.LifeDsl.EvolutionRules");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleInitialGrid
entryRuleInitialGrid returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitialGridRule()); }
	iv_ruleInitialGrid=ruleInitialGrid
	{ $current=$iv_ruleInitialGrid.current; }
	EOF;

// Rule InitialGrid
ruleInitialGrid returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CellsAliveX:'
		{
			newLeafNode(otherlv_0, grammarAccess.getInitialGridAccess().getCellsAliveXKeyword_0());
		}
		(
			(
				lv_cellsX_1_0=RULE_STRING
				{
					newLeafNode(lv_cellsX_1_0, grammarAccess.getInitialGridAccess().getCellsXSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInitialGridRule());
					}
					setWithLastConsumed(
						$current,
						"cellsX",
						lv_cellsX_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='CellsAliveY:'
		{
			newLeafNode(otherlv_2, grammarAccess.getInitialGridAccess().getCellsAliveYKeyword_2());
		}
		(
			(
				lv_cellsY_3_0=RULE_STRING
				{
					newLeafNode(lv_cellsY_3_0, grammarAccess.getInitialGridAccess().getCellsYSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInitialGridRule());
					}
					setWithLastConsumed(
						$current,
						"cellsY",
						lv_cellsY_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleEvolutionRules
entryRuleEvolutionRules returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvolutionRulesRule()); }
	iv_ruleEvolutionRules=ruleEvolutionRules
	{ $current=$iv_ruleEvolutionRules.current; }
	EOF;

// Rule EvolutionRules
ruleEvolutionRules returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Rule:'
		{
			newLeafNode(otherlv_0, grammarAccess.getEvolutionRulesAccess().getRuleKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEvolutionRulesAccess().getNameDieAliveUnitEnumRuleCall_1_0());
				}
				lv_name_1_0=ruleDieAliveUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEvolutionRulesRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"game.of.life.LifeDsl.DieAliveUnit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='ComparisonOperator:'
		{
			newLeafNode(otherlv_2, grammarAccess.getEvolutionRulesAccess().getComparisonOperatorKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEvolutionRulesAccess().getOperatorOperatorEnumRuleCall_3_0());
				}
				lv_operator_3_0=ruleOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEvolutionRulesRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"game.of.life.LifeDsl.Operator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='NumberOfLiveNeighbors:'
		{
			newLeafNode(otherlv_4, grammarAccess.getEvolutionRulesAccess().getNumberOfLiveNeighborsKeyword_4());
		}
		(
			(
				lv_numberOfLiveNeighbors_5_0=RULE_INT
				{
					newLeafNode(lv_numberOfLiveNeighbors_5_0, grammarAccess.getEvolutionRulesAccess().getNumberOfLiveNeighborsINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEvolutionRulesRule());
					}
					setWithLastConsumed(
						$current,
						"numberOfLiveNeighbors",
						lv_numberOfLiveNeighbors_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Rule Operator
ruleOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='<'
			{
				$current = grammarAccess.getOperatorAccess().getLTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOperatorAccess().getLTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='=='
			{
				$current = grammarAccess.getOperatorAccess().getEQEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOperatorAccess().getEQEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='>'
			{
				$current = grammarAccess.getOperatorAccess().getGTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getOperatorAccess().getGTEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule DieAliveUnit
ruleDieAliveUnit returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='die'
			{
				$current = grammarAccess.getDieAliveUnitAccess().getDIEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDieAliveUnitAccess().getDIEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='live'
			{
				$current = grammarAccess.getDieAliveUnitAccess().getLIVEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDieAliveUnitAccess().getLIVEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='become alive'
			{
				$current = grammarAccess.getDieAliveUnitAccess().getBECOME_ALIVEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDieAliveUnitAccess().getBECOME_ALIVEEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
